"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/ocr-service.ts":
/*!********************************!*\
  !*** ./src/lib/ocr-service.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   performOcr: () => (/* binding */ performOcr)\n/* harmony export */ });\nconst CHUNKR_API_URL = \"https://api.chunkr.ai/api/v1\" || 0;\nconst CHUNKR_API_KEY = \"lu_5X3ZEBLd236_FtQQovDtxSoHYmdTFGcKAmrBjuuU8hXRe\";\nasync function performOcr(file) {\n    if (!CHUNKR_API_KEY) {\n        throw new Error('Chunkr API key is not configured');\n    }\n    try {\n        var _result_output;\n        /*\n        // Create form data\n        const formData = new FormData();\n        formData.append('file', file);\n        // formData.append('task', 'ocr');\n        // formData.append('options', JSON.stringify({\n        //     language: 'eng',\n        //     output_format: 'text'\n        // }));\n        formData.append(\"json_schema\", \"<any>\");\n        formData.append(\"model\", \"Fast\");\n        formData.append(\"ocr_strategy\", \"Auto\");\n        formData.append(\"segmentation_strategy\", \"LayoutAnalysis\");\n        formData.append(\"target_chunk_length\", \"123\");\n        */ /*HttpResponse<String> response = Unirest.post(\"https://api.chunkr.ai/api/v1/task/parse\")\n        .header(\"Authorization\", \"<api-key>\")\n        .header(\"Content-Type\", \"application/json\")\n        .body(\"{\\n  \\\"chunk_processing\\\": null,\\n  \\\"expires_in\\\": 123,\\n  \\\"file\\\": \\\"<string>\\\",\\n  \\\"file_name\\\": \\\"<string>\\\",\\n  \\\"high_resolution\\\": false,\\n  \\\"ocr_strategy\\\": null,\\n  \\\"pipeline\\\": null,\\n  \\\"segment_processing\\\": null,\\n  \\\"segmentation_strategy\\\": null\\n}\")\n        .asString();*/ // Initial task creation\n        const taskResponse = await fetch(\"\".concat(CHUNKR_API_URL, \"/task/parse\"), {\n            method: 'POST',\n            headers: {\n                'Authorization': \"\".concat(CHUNKR_API_KEY),\n                'Content-Type': 'application/json'\n            },\n            body: '{\\n  \"chunk_processing\": null,\\n  \"expires_in\": 123,\\n  \"file\": \"'.concat(file, '\",\\n \"high_resolution\": false,\\n  \"ocr_strategy\": null,\\n  \"pipeline\": null,\\n  \"segment_processing\": null,\\n  \"segmentation_strategy\": null\\n}'),\n            mode: 'cors'\n        });\n        if (!taskResponse.ok) {\n            const errorData = await taskResponse.json().catch(()=>({}));\n            console.error('Task creation failed:', errorData);\n            throw new Error(\"API Error: \".concat(taskResponse.status, \" - \").concat(taskResponse.statusText));\n        }\n        const taskData = await taskResponse.json();\n        // Poll for results\n        const result = await pollTaskResult(taskData.task_id);\n        // Process the text content\n        const textContent = ((_result_output = result.output) === null || _result_output === void 0 ? void 0 : _result_output.text) || '';\n        const lines = textContent.split('\\n').map((line)=>line.trim()).filter((line)=>line.length > 0 && /\\d+\\/\\d+/.test(line));\n        if (lines.length === 0) {\n            console.warn('No blood pressure readings found in OCR result');\n        }\n        return lines;\n    } catch (error) {\n        console.error('OCR processing error:', error);\n        throw new Error(error instanceof Error ? error.message : 'Failed to process image');\n    }\n}\nasync function pollTaskResult(taskId) {\n    let maxAttempts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 30;\n    const delay = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n    let attempts = 0;\n    while(attempts < maxAttempts){\n        try {\n            const response = await fetch(\"\".concat(CHUNKR_API_URL, \"/task/\").concat(taskId), {\n                headers: {\n                    'Authorization': \"\".concat(CHUNKR_API_KEY),\n                    'Accept': 'application/json'\n                },\n                mode: 'cors'\n            });\n            if (!response.ok) {\n                throw new Error(\"Poll failed: \".concat(response.status));\n            }\n            const data = await response.json();\n            if (data.status === 'completed') {\n                return data;\n            } else if (data.status === 'failed') {\n                throw new Error(data.error || 'Task processing failed');\n            }\n            attempts++;\n            await delay(2000);\n        } catch (error) {\n            console.error(\"Polling attempt \".concat(attempts, \" failed:\"), error);\n            throw error;\n        }\n    }\n    throw new Error('Task polling timed out');\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/ocr-service.ts\n"));

/***/ })

});